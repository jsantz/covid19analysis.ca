
let Application = PIXI.Application,
    Container = PIXI.Container,
    loader = PIXI.loader,
    resources = PIXI.loader.resources,
    Graphics = PIXI.Graphics,
    TextureCache = PIXI.utils.TextureCache,
    Sprite = PIXI.Sprite,
    TextStyle = PIXI.TextStyle,
    Radius = 10,
    populations = 200,
    naturalImmunity = 1,
    numMortal=0;
riskpop = 1,
    bump = true,
    transmissibility = 70,
    socialSpeed = 1,
    infectionLength = 300,
    sample = 30,
    timeline = 0,
    mortalityRate = 3;

healthyset=[],
    immuneset=[],
    infectedset=[],
    mortalset=[],

    healthyperc=[],
    immuneperc=[],
    infectedperc=[],
    mortalperc=[],

    xvalsSim =[],
    quarantineLevel = 0;

let state, mortal, infected, healthy, chimes, exit, player, dungeon,
    immune, healthBar, message, gameScene, gameOverScene, enemies, id;

//Create a Pixi Application
let app = new Application({
    width: 810,
    height: 810,
    antialiasing: true,
    transparent: false,
    resolution: 1
});

function renderScene(){
    //Add the canvas that Pixi automatically created for you to the HTML document
    document.body.appendChild(app.view);
    loader.add("images/pandemic.json");
    loader.load(setup);


}
function setup() {
    gameScene = new Container();
    app.stage.addChild(gameScene);
    id = resources["images/pandemic.json"].textures;
    //Dungeon
    dungeon = new Sprite(id["area.png"]);
    gameScene.addChild(dungeon);

    //mortal

    explorer = new Sprite(id["explorer.png"]);
    explorer.x = 68;
    explorer.y = gameScene.height / 2 - explorer.height / 2;
    explorer.vx = 0;
    explorer.vy = 0;

    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

    Create The Sprites

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

    // set pops
    let spacing = 2,
        xOffset = 150,
        speed = socialSpeed,
        direction = 3;

    //mortal
    mortals =[]
    let numMortals = numMortal;
    for(let i=0; i<numMortals; i++){
        mortal = new Sprite(id["explorer.png"]);
        mortal.x = 68;
        mortal.y = gameScene.height / 2 - mortal.height / 2;
        mortal.vx = 0;
        mortal.vy = 0;
        gameScene.addChild(mortal);
    }

    //immune
    immunes = [];
    let numberOfImmune = naturalImmunity;
    for (let i = 0; i < numberOfImmune; i++) {
        //Make an infected
        immune = new Sprite(id["immune.png"]);
        let x = randomInt(0, app.stage.width - immune.width);
        let y = randomInt(0, app.stage.height - immune.height);
        immune.x = x;
        immune.y = y;
        immune.vy = speed * randomInt(-3, 3);
        immune.vx = speed * randomInt(-3, 3);
        direction *= -1;
        immunes.push(immune);
        gameScene.addChild(immune);
    }

    //make the infected
    let numberOfInfected = riskpop;
    infecteds = [];
    for (let i = 0; i < numberOfInfected; i++) {
        //Make an infected
        infected = new Sprite(id["infected.png"]);
        let x = randomInt(0, app.stage.width - infected.width);
        let y = randomInt(0, app.stage.height - infected.height);
        infected.x = x;
        infected.y = y;
        infected.vy = speed * randomInt(-3, 3);
        infected.vx = speed * randomInt(-3, 3);
        infected.infection=infectionLength;
        direction *= -1;
        infecteds.push(infected);
        gameScene.addChild(infected);
    }
    /*infected = new Sprite(id["infected.png"]);
    infected.x = gameScene.width - infected.width - 48;
    infected.y = gameScene.height / 2 - infected.height / 2;
    gameScene.addChild(infected);*/

    //Make the healthy
    let numberOfHealthy = populations;

    //An array to store all the healthy people
    healthys = [];
    for (let i = 0; i < numberOfHealthy; i++) {
        //Make a healthy
        let healthy = new Sprite(id["healthy.png"]);
        let x = randomInt(0, 800 - healthy.width);
        let y = randomInt(0, 800 - healthy.height);
        healthy.x = x;
        healthy.y = y;
        if(!isQuarantined()){
            healthy.vy = speed * randomInt(-3, 3);
            healthy.vx = speed * randomInt(-3, 3);
        }else{
            healthy.vy = 0;
            healthy.vx = 0;
        }
        direction *= -1;
        healthys.push(healthy);
        gameScene.addChild(healthy);
    }

    //Create the `gameOver` scene
    gameOverScene = new Container();
    app.stage.addChild(gameOverScene);

    //Make the `gameOver` scene invisible when the game first starts
    gameOverScene.visible = false;

    //Create the text sprite and add it to the `gameOver` scene
    let style = new TextStyle({
        fontFamily: "Futura",
        fontSize: 64,
        fill: "white"
    });

    //message = new Text("The End!", style);
    //message.x = 120;
    //message.y = app.stage.height / 2 - 32;
    //fgameOverScene.addChild(message);
    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

    Capture The Keyboard

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
    //Capture the keyboard arrow keys
    let left = keyboard(37),
        up = keyboard(38),
        right = keyboard(39),
        down = keyboard(40);
    //Left arrow key `press` method
    left.press = function() {

        //Change the mortal's velocity when the key is pressed
        mortal.vx = -5;
        mortal.vy = 0;
    };
    //Left arrow key `release` method
    left.release = function() {

        //If the left arrow has been released, and the right arrow isn't down,
        //and the mortal isn't moving vertically:
        //Stop the mortal
        if (!right.isDown && mortal.vy === 0) {
            mortal.vx = 0;
        }
    };
    //Up
    up.press = function() {
        mortal.vy = -5;
        mortal.vx = 0;
    };
    up.release = function() {
        if (!down.isDown && mortal.vx === 0) {
            mortal.vy = 0;
        }
    };
    //Right
    right.press = function() {
        mortal.vx = 5;
        mortal.vy = 0;
    };
    right.release = function() {
        if (!left.isDown && mortal.vy === 0) {
            mortal.vx = 0;
        }
    };
    //Down
    down.press = function() {
        mortal.vy = 5;
        mortal.vx = 0;
    };
    down.release = function() {
        if (!up.isDown && mortal.vx === 0) {
            mortal.vy = 0;
        }
    };
    //Set the game state
    state = play;
    //Start the game loop
    app.ticker.add(delta => gameLoop(delta));
}
function gameLoop(delta){

    //Update the current game state:
    state(delta);
}
function play(delta) {
    sample--;



    //Contain the mortal inside the area of the dungeon
    //contain(mortal, {x: 28, y: 10, width: 700, height: 700});
    //contain(mortal, stage);

    //Set `mortalHit` to `false` before checking for a collision
    let explorerHit = false;

    //Loop through healthies
    healthys.forEach(function(healthy) {
        healthy.y += healthy.vy;
        healthy.x += healthy.vx;
        let healthHitsWall = contain(healthy, {x: 28, y: 10, width: 800, height: 800});
        if (healthHitsWall === "top" || healthHitsWall === "bottom" ) {
            healthy.vy *= -1;
        }
        if(healthHitsWall==="left" ||healthHitsWall==="right"){
            healthy.vx *= -1;
        }
        /*if(hitTestRectangle(mortal, healthy, Radius)) {
            mortalHit = true;
        }*/
        healthys.forEach(function(healthy1){
            if(hitTestRectangle(healthy, healthy1, Radius)){
                if(bump){
                    healthy.vx *= -1;
                    healthy.vy *= -1;
                    healthy1.vx *= -1;
                    healthy1.vy *= -1;
                }
            }
        });
    });

    //Loop through infecteds
    infecteds.forEach(function(infected, infdex, infset ) {
        infected.y += infected.vy;
        infected.x += infected.vx;
        let healthHitsWall = contain(infected, {x: 28, y: 10, width: 800, height: 800});
        if (healthHitsWall === "top" || healthHitsWall === "bottom" ) {
            infected.vy *= -1;
        }
        if(healthHitsWall==="left" ||healthHitsWall==="right"){
            infected.vx *= -1;
        }
        /*if(hitTestRectangle(mortal, healthy, Radius)) {
            mortalHit = true;
        }*/
        infecteds.forEach(function(infected1){
            if(hitTestRectangle(infected, infected1, Radius)){
                if(bump){
                    infected.vx *= -1;
                    infected.vy *= -1;
                    infected1.vx *= -1;
                    infected1.vy *= -1;
                }
            }
        });
        healthys.forEach(function(healthy, index, set){
            if(hitTestRectangle(infected, healthy, Radius)){
                let isInfected = transmission();
                let infectedn;
                if(isInfected){
                    infectedn = new Sprite(id["infected.png"]);
                    infectedn.x = healthy.x;
                    infectedn.y = healthy.y;
                    infectedn.vy = healthy.vy;
                    infectedn.vx = healthy.vx;
                    infectedn.infection=infectionLength;
                    infecteds.push(infectedn);
                    set.splice(index, 1);
                    gameScene.addChild(infectedn);
                    gameScene.removeChild(healthy);
                }
                if(bump){
                    infected.vx *= -1;
                    infected.vy *= -1;
                    healthy.vx *= -1;
                    healthy.vy *= -1;
                }
                healtys = set;
            }
        });
        infected.infection--;
        if(!infected.infection){
            if(mortality()){
                let mortal;
                mortal = new Sprite(id["explorer.png"]);
                mortal.x = infected.x;
                mortal.y = infected.y;
                mortal.vx = 0;
                mortal.vy = 0;
                mortals.push(mortal);
                infset.splice(infdex, 1);
                gameScene.addChild(mortal);
                gameScene.removeChild(infected);
            }else{
                let immune;
                immune = new Sprite(id["immune.png"]);
                immune.x = infected.x;
                immune.y = infected.y;
                immune.vy = infected.vy;
                immune.vx = infected.vx;
                immune.infection=30;
                immunes.push(immune);
                infset.splice(infdex, 1);
                gameScene.addChild(immune);
                gameScene.removeChild(infected);
            }
        }
        infecteds = infset;
    });

    immunes.forEach(function(immune) {
        immune.y += immune.vy;
        immune.x += immune.vx;
        let healthHitsWall = contain(immune, {x: 28, y: 10, width: 800, height: 800});
        if (healthHitsWall === "top" || healthHitsWall === "bottom" ) {
            immune.vy *= -1;
        }
        if(healthHitsWall==="left" ||healthHitsWall==="right"){
            immune.vx *= -1;
        }
        /*if(hitTestRectangle(mortal, healthy, Radius)) {
            mortalHit = true;
        }*/
        immunes.forEach(function(immune1){
            if(hitTestRectangle(immune, immune1, Radius)){
                if(bump){
                    immune.vx *= -1;
                    immune.vy *= -1;
                    immune1.vx *= -1;
                    immune1.vy *= -1;
                }
            }
        });
        healthys.forEach(function(healthy1){
            if(hitTestRectangle(immune, healthy1, Radius)){
                if(bump){
                    immune.vx *= -1;
                    immune.vy *= -1;
                    healthy1.vx *= -1;
                    healthy1.vy *= -1;
                }
            }
        });
        infecteds.forEach(function(infected1){
            if(hitTestRectangle(immune, infected1, Radius)){
                if(bump){
                    immune.vx *= -1;
                    immune.vy *= -1;
                    infected1.vx *= -1;
                    infected1.vy *= -1;
                }
            }
        });
    });

    //If the mortal is hit...
    if(explorerHit) {

        //Make the mortal semi-transparent
        explorer.alpha = 0.5;

        //Reduce the width of the health bar's inner rectangle by 1 pixel
        healthBar.outer.width -= 1;

    } else {

        //Make the mortal fully opaque (non-transparent) if it hasn't been hit
        explorer.alpha = 1;
    }



    if (infecteds.length == 0) {
        state = end;
        //message.text = "You won!";
    }
    if(!sample){
        sample=30;
        healthyset[timeline]= { t: timeline, y: healthys.length};
        infectedset[timeline] = { t: timeline, y: infecteds.length};
        immuneset[timeline] = { t: timeline, y: immunes.length};
        mortalset[timeline] = { t: timeline, y: mortals.length};
        $("#phealthy").text(healthys.length);
        $("#pinfected").text(infecteds.length);
        $("#pimmune").text(immunes.length);
        $("#pmortal").text(mortals.length);
        xvalsSim[timeline]=timeline;
        if(timeline > 0){

            healthyperc[timeline]= {t:timeline, y: perc(healthyset[timeline].y, healthyset[timeline-1].y)}
            immuneperc[timeline]= {t:timeline, y: perc(immuneset[timeline].y,immuneset[timeline-1].y)}
            infectedperc[timeline]= {t:timeline, y: perc(infectedset[timeline].y,infectedset[timeline-1].y)}
            mortalperc[timeline]= {t:timeline, y: perc(mortalset[timeline].y,mortalset[timeline-1].y)}
            window.myLineP.update();
        }
        //var ctx = document.getElementById('canvas').getContext('2d');
        //window.myLine = new Chart(ctx, config);
        window.myLine.update();
        timeline++;
    }
}

function perc(x2, x1){
    //let temp = (x2-x1)*100;
    //if(temp>100){
      //  return 100;
    //}else{
        //return temp;
    //}
    return (x2-x1)*100;

}
function end() {
    //gameScene.visible = false;
    //gameOverScene.visible = true;
}
function transmission(){
    return Math.random() < transmissibility/100;
    /*let fraction = 100/transmissibility;
    let testFraction = randomInt(0,fraction);
    if (testFraction < 1){
        return true;
    }else{
        return false;
    }*/
}
function mortality(){
    let temp = Math.random()
    return temp < mortalityRate/100;
}

function contain(sprite, container) {
    let collision = undefined;
    if (sprite.x < container.x) {
        sprite.x = container.x;
        collision = "left";
    }
    if (sprite.y < container.y) {
        sprite.y = container.y;
        collision = "top";
    }
    if (sprite.x + sprite.width > container.width) {
        sprite.x = container.width - sprite.width;
        collision = "right";
    }
    if (sprite.y + sprite.height > container.height) {
        sprite.y = container.height - sprite.height;
        collision = "bottom";
    }
    return collision;
}
function hitTestRectangle(r1, r2, radius) {
    let hit, combinedHalfWidths, combinedHalfHeights, vx, vy; //dist;
    hit = false;
    r1.centerX = r1.x + r1.width / 2;
    r1.centerY = r1.y + r1.height / 2;
    r2.centerX = r2.x + r2.width / 2;
    r2.centerY = r2.y + r2.height / 2;
    r1.halfWidth = r1.width / 2;
    r1.halfHeight = r1.height / 2;
    r2.halfWidth = r2.width / 2;
    r2.halfHeight = r2.height / 2;
    vx = r1.centerX - r2.centerX;
    vy = r1.centerY - r2.centerY;
    dist = Math.sqrt(Math.pow(vx,2) + Math.pow(vy,2));
    hit = dist < radius;
    /*combinedHalfWidths = radius; //r1.halfWidth + r2.halfWidth;
    combinedHalfHeights = radius; //r1.halfHeight + r2.halfHeight;
    //Check for a collision on the x axis
    if (Math.abs(vx) < combinedHalfWidths) {
        if (Math.abs(vy) < combinedHalfHeights) {
            hit = true;
        } else {
            hit = false;
        }
    } else {
        hit = false;
    }*/
    return hit;
};
function randomInt(min, max) {
    let temp = Math.random();
    if(temp===0){
        temp=1;
    }
    return Math.floor(temp * (max - min + 1)) + min;
}
function keyboard(keyCode) {
    var key = {};
    key.code = keyCode;
    key.isDown = false;
    key.isUp = true;
    key.press = undefined;
    key.release = undefined;
    //The `downHandler`
    key.downHandler = function(event) {
        if (event.keyCode === key.code) {
            if (key.isUp && key.press) key.press();
            key.isDown = true;
            key.isUp = false;
        }
        event.preventDefault();
    };
    //The `upHandler`
    key.upHandler = function(event) {
        if (event.keyCode === key.code) {
            if (key.isDown && key.release) key.release();
            key.isDown = false;
            key.isUp = true;
        }
        event.preventDefault();
    };
    //Attach event listeners
    window.addEventListener(
        "keydown", key.downHandler.bind(key), false
    );
    window.addEventListener(
        "keyup", key.upHandler.bind(key), false
    );
    return key;
}

renderScene();

var configsim = {
    type: 'line',
    data: {
        labels: xvalsSim,
        datasets: [
            {
                label: 'Immune',
                borderColor: '#a4c15b',
                backgroundColor: '#c6d899',
                data: immuneset,
            },{
                label: 'Infected',
                borderColor: '#FF0000',
                backgroundColor: '#FFaf30',
                data: infectedset,
            },{
                label: 'Susceptible',
                //fill:false,
                borderColor: '#4383cc',
                backgroundColor: '#8ab2df',
                data: healthyset,
            },{
                label: 'Victim',
                //fill:false,
                borderColor: '#505050',
                backgroundColor: '#f0f0f0',
                data: mortalset,
            }
        ]
    },
    options: {
        responsive: true,
        title: {
            display: true,
            text: 'Population Changes'
        },
        tooltips: {
            mode: 'index',
        },
        hover: {
            mode: 'index'
        },
        scales: {
            xAxes: [{
                distribution: 'series',
                offset: true,
                labelString: 'Epoch',
                ticks: {
                    major: {
                        enabled: true,
                        fontStyle: 'bold'
                    },
                    source: 'data',
                    autoSkip: true,
                    autoSkipPadding: 75,
                    maxRotation: 0,
                    sampleSize: 100
                }
            }],
            yAxes: [{
                stacked: false,
                scaleLabel: {
                    display: true,
                    labelString: 'Population'
                }

            }]
        }
    }
};
var configperc = {
    type: 'line',
    data: {
        labels: xvalsSim,
        datasets: [
            {
                label: 'Immune',
                borderColor: '#a4c15b',
                backgroundColor: '#c6d899',
                data: immuneperc,
            },{
                label: 'Infected',
                borderColor: '#FF0000',
                backgroundColor: '#FFaf30',
                data: infectedperc,
            },{
                label: 'Susceptible',
                //fill:false,
                borderColor: '#4383cc',
                backgroundColor: '#8ab2df',
                data: healthyperc,
            },{
                label: 'Victim',
                //fill:false,
                borderColor: '#505050',
                backgroundColor: '#f0f0f0',
                data: mortalperc,
            }
        ]
    },
    options: {
        responsive: true,
        title: {
            display: true,
            text: 'Population Changes'
        },
        tooltips: {
            mode: 'index',
        },
        hover: {
            mode: 'index'
        },
        scales: {
            xAxes: [{
                distribution: 'series',
                offset: true,
                labelString: 'Epoch',
                ticks: {
                    major: {
                        enabled: true,
                        fontStyle: 'bold'
                    },
                    source: 'data',
                    autoSkip: true,
                    autoSkipPadding: 75,
                    maxRotation: 0,
                    sampleSize: 100
                }
            }],
            yAxes: [{
                stacked: false,
                scaleLabel: {
                    display: true,
                    labelString: 'Population'
                }

            }]
        }
    }
};
function isQuarantined(){
    return Math.random() < quarantineLevel/100;
}

//window.onload = function() {
var ctxx = document.getElementById('canvassim').getContext('2d');
window.myLine = new Chart(ctxx, configsim);
var ctxp = document.getElementById('canvasperc').getContext('2d');
window.myLineP = new Chart(ctxp, configperc);
//}
$('#runsimulation').click(function(){

    //RESET NEW VALUES
    bump =$("#isBounce").is(":checked");
    populations = $( "#slider-range-min" ).slider( "value" );
    transmissibility = $("#transmissibility").slider("value");
    socialSpeed = $("#movementspd").slider("value")/100;
    quarantineLevel = $("#shelter").slider("value");
    Radius = $("#radius").slider("value");
    infectionLength = $("#infectionTime").slider("value")*30;
    mortalityRate = $("#mortality").slider("value");


    app.destroy(true);
    app = null;
    //loader.resources["images/pandemic.json"].texture.destroy(true);
    loader.reset();
    app = new Application({
        width: 810,
        height: 810,
        antialiasing: true,
        transparent: false,
        resolution: 1
    });

    healthyset= [];
    immuneset=[];
    infectedset=[];
    mortalset=[];
    xvalsSim =[];
    timeline = 0;

    var configsim = {
        type: 'line',
        data: {
            labels: xvalsSim,
            datasets: [
                {
                    label: 'Victim',
                    //fill:false,
                    borderColor: '#101010',
                    backgroundColor: '#f0f0f0',
                    data: mortalset,
                },
                {
                    label: 'Immune',
                    borderColor: '#a4c15b',
                    backgroundColor: '#c6d899',
                    data: immuneset,
                },{
                    label: 'Infected',
                    borderColor: '#FF0000',
                    backgroundColor: '#FFaf30',
                    data: infectedset,
                },{
                    label: 'Healthy',
                    //fill:false,
                    borderColor: '#4383cc',
                    backgroundColor: '#8ab2df',
                    data: healthyset,
                }
            ]
        },
        options: {
            responsive: true,
            title: {
                display: true,
                text: 'Population Changes'
            },
            tooltips: {
                mode: 'index',
            },
            hover: {
                mode: 'index'
            },
            scales: {
                xAxes: [{
                    distribution: 'series',
                    offset: true,
                    labelString: 'Epoch',
                    ticks: {
                        major: {
                            enabled: true,
                            fontStyle: 'bold'
                        },
                        source: 'data',
                        autoSkip: true,
                        autoSkipPadding: 75,
                        maxRotation: 0,
                        sampleSize: 100
                    }
                }],
                yAxes: [{
                    stacked: false,
                    scaleLabel: {
                        display: true,
                        labelString: 'Population'
                    }

                }]
            }
        }
    };
    var configperc = {
        type: 'line',
        data: {
            labels: xvalsSim,
            datasets: [
                {
                    label: 'Immune',
                    borderColor: '#a4c15b',
                    backgroundColor: '#c6d899',
                    data: immuneperc,
                },{
                    label: 'Infected',
                    borderColor: '#FF0000',
                    backgroundColor: '#FFaf30',
                    data: infectedperc,
                },{
                    label: 'Susceptible',
                    //fill:false,
                    borderColor: '#4383cc',
                    backgroundColor: '#8ab2df',
                    data: healthyperc,
                },{
                    label: 'Victim',
                    //fill:false,
                    borderColor: '#505050',
                    backgroundColor: '#f0f0f0',
                    data: mortalperc,
                }
            ]
        },
        options: {
            responsive: true,
            title: {
                display: true,
                text: 'Population Changes'
            },
            tooltips: {
                mode: 'index',
            },
            hover: {
                mode: 'index'
            },
            scales: {
                xAxes: [{
                    distribution: 'series',
                    offset: true,
                    labelString: 'Epoch',
                    ticks: {
                        major: {
                            enabled: true,
                            fontStyle: 'bold'
                        },
                        source: 'data',
                        autoSkip: true,
                        autoSkipPadding: 75,
                        maxRotation: 0,
                        sampleSize: 100
                    }
                }],
                yAxes: [{
                    stacked: false,
                    scaleLabel: {
                        display: true,
                        labelString: 'Population'
                    }

                }]
            }
        }
    };
    var ctxx = document.getElementById('canvassim').getContext('2d');
    window.myLine = new Chart(ctxx, configsim);
    var ctxp = document.getElementById('canvasperc').getContext('2d');
    window.myLineP = new Chart(ctxp, configperc);
    renderScene();
})

$( function() {
    var handle = $( "#custom-handle" );
    $( "#slider-range-min" ).slider({
        range: "min",
        value: 200,
        min: 50,
        max: 800,
        create: function() {
            handle.text( $( this ).slider( "value" ) );
        },
        slide: function( event, ui ) {
            $( "#amount" ).val( ui.value );
            handle.text( ui.value );
        }
    });
    $( "#amount" ).val(  + $( "#slider-range-min" ).slider( "value" ) );
} );
$( function() {
    var handle = $( "#transmissibility-handle" );
    $( "#transmissibility" ).slider({
        range: "min",
        value: 70,
        min: 1,
        max: 100,
        create: function() {
            handle.text( $( this ).slider( "value" ) );
        },
        slide: function( event, ui ) {
            $( "#transmissibility-label" ).val('% ' + ui.value );
            handle.text('%' + ui.value );
        }
    });
    $( "#transmissibility-label" ).val('% '  + $( "#transmissibility" ).slider( "value" ) );
} );
$( function() {
    var handle = $( "#movementspd-handle" );
    $( "#movementspd" ).slider({
        range: "min",
        value: 100,
        min: 1,
        max: 200,
        create: function() {
            handle.text( $( this ).slider( "value" ) );
        },
        slide: function( event, ui ) {
            $( "#movementspd-label" ).val('% ' + ui.value );
            handle.text('%' + ui.value );
        }
    });
    $( "#movementspd-label" ).val('% '  + $( "#movementspd" ).slider( "value" ) );
} );//shelter
$( function() {
    var handle = $( "#shelter-handle" );
    $( "#shelter" ).slider({
        range: "min",
        value: 0,
        min: 0,
        max: 100,
        create: function() {
            handle.text( $( this ).slider( "value" ) );
        },
        slide: function( event, ui ) {
            $( "#shelter-label" ).val('% ' + ui.value );
            handle.text('%' + ui.value );
        }
    });
    $( "#shelter-label" ).val('% ' + $( "#shelter" ).slider( "value" ) );
} );//radius
$( function() {
    var handle = $( "#radius-handle" );
    $( "#radius" ).slider({
        range: "min",
        value: 10,
        min: 1,
        max: 20,
        create: function() {
            handle.text( $( this ).slider( "value" ) );
        },
        slide: function( event, ui ) {
            $( "#radius-label" ).val( ui.value );
            handle.text( ui.value );
        }
    });
    $( "#radius-label" ).val($( "#radius" ).slider( "value" ) );
} );//infectionTime
$( function() {
    var handle = $( "#infectionTime-handle" );
    $( "#infectionTime" ).slider({
        range: "min",
        value: 10,
        min: 1,
        max: 30,
        create: function() {
            handle.text( $( this ).slider( "value" ) );
        },
        slide: function( event, ui ) {
            $( "#infectionTime-label" ).val( ui.value );
            handle.text( ui.value );
        }
    });
    $( "#infectionTime-label" ).val($( "#infectionTime" ).slider( "value" ) );
} );


$( function() {
    var handle = $( "#mortality-handle" );
    $( "#mortality" ).slider({
        range: "min",
        value: 3,
        min: 0,
        max: 100,
        create: function() {
            handle.text( $( this ).slider( "value" ) );
        },
        slide: function( event, ui ) {
            $( "#mortality-label" ).val( ui.value );
            handle.text( ui.value );
        }
    });
    $( "#mortality-label" ).val($( "#mortality" ).slider( "value" ) );
} );